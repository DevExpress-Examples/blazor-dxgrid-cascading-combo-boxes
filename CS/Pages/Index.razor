@page "/"
@implements IDisposable

@using Microsoft.EntityFrameworkCore
@using CascadingComboBoxes.Models
@inject IDbContextFactory<NorthwindContext> NorthwindContextFactory
@inject IDbContextFactory<WorldCitiesContext> WorldCitiesContextFactory

<DxGrid Data="Data"
        PageSize="5"
        ValidationEnabled="false"
        CustomizeEditModel="Grid_CustomizeEditModel"
        EditModelSaving="Grid_EditModelSaving"
        DataItemDeleting="Grid_DataItemDeleting">
    <Columns>
        <DxGridCommandColumn Width="160px" />
        <DxGridDataColumn FieldName="CompanyName" />
        <DxGridDataColumn FieldName="ContactName" />
        <DxGridDataColumn FieldName="ContactTitle" />
        <DxGridDataColumn FieldName="Phone" Width="10%" />
        <DxGridDataColumn FieldName="Country" Width="10%" />
        <DxGridDataColumn FieldName="City" Width="10%" />
    </Columns>
    <EditFormTemplate Context="EditFormContext">
        @{
            var supplier = (Supplier)EditFormContext.EditModel;
        }
        <DxFormLayout CssClass="w-100">
            <DxFormLayoutItem Caption="Company Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("CompanyName")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Contact Name:" ColSpanMd="6">
                @EditFormContext.GetEditor("ContactName")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Contact Title:" ColSpanMd="6">
                @EditFormContext.GetEditor("ContactTitle")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Phone:" ColSpanMd="6">
                @EditFormContext.GetEditor("Phone")
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="Country:" ColSpanMd="6">
                <DxComboBox Data="@Countries"
                            NullText="Select Country..."
                            FilteringMode="DataGridFilteringMode.Contains"
                            TextFieldName="CountryName"
                            ValueFieldName="CountryName"
                            Value="@supplier.Country"
                            ValueChanged="(string newCellValue) => {
                                                supplier.Country = newCellValue;
                                                supplier.City = null;
                                          }">
                </DxComboBox>
            </DxFormLayoutItem>
            <DxFormLayoutItem Caption="City:" ColSpanMd="6">
                @{
                    var countryId = Countries.Where(c => c.CountryName == supplier.Country).FirstOrDefault()?.CountryId;
                    var cities = Cities.Where(x => x.CountryId == countryId);
                }
                <DxComboBox Data="@cities"
                            NullText="Select City..."
                            FilteringMode="DataGridFilteringMode.Contains"
                            @bind-Value="@supplier.City"
                            TextFieldName="CityName"
                            ValueFieldName="CityName">
                </DxComboBox>
            </DxFormLayoutItem>
        </DxFormLayout>
    </EditFormTemplate>
</DxGrid>

@code {
    NorthwindContext Northwind { get; set; }
    WorldCitiesContext WorldCities { get; set; }
    IEnumerable<Supplier> Data { get; set; }
    IEnumerable<Country> Countries { get; set; }
    IEnumerable<City> Cities { get; set; }

    protected override async Task OnInitializedAsync() {
        Northwind = NorthwindContextFactory.CreateDbContext();
        WorldCities = WorldCitiesContextFactory.CreateDbContext();
        Countries = await WorldCities.Countries.ToListAsync();
        Cities = await WorldCities.Cities.ToListAsync();
        Data = await Northwind.Suppliers.ToListAsync();
    }
    void Grid_CustomizeEditModel(GridCustomizeEditModelEventArgs e) {
        if (e.IsNew) {
            var newSupplier = (Supplier)e.EditModel;
            newSupplier.CompanyName = "DevExpress";
            newSupplier.ContactName = "John Doe";
        }
    }
    async Task Grid_EditModelSaving(GridEditModelSavingEventArgs e) {
        var editModel = (Supplier)e.EditModel;
        // Re-query a data item from the database.
        var dataItem = e.IsNew ? new Supplier() : Northwind.Suppliers.Find(editModel.SupplierId);
        // Assign changes from the edit model to the data item.
        if (dataItem != null) {
            e.CopyChangesToDataItem();
            // Post changes to the database.
            if (e.IsNew)
                await Northwind.AddAsync(dataItem);
            await Northwind.SaveChangesAsync();
            // Reload the entire Grid.
            Data = await Northwind.Suppliers.ToListAsync();
        }
    }
    async Task Grid_DataItemDeleting(GridDataItemDeletingEventArgs e) {
        var dataItem = Northwind.Suppliers.Find((e.DataItem as Supplier).SupplierId);
        if (dataItem != null) {
            // Remove the data item from the database.
            Northwind.Remove(dataItem);
            await Northwind.SaveChangesAsync();
            // Reload the entire Grid.
            Data = await Northwind.Suppliers.ToListAsync();
        }
    }
    public void Dispose() {
        Northwind?.Dispose();
        WorldCities?.Dispose();        
    }
}
